@page "/edit/{id}"
@inject HttpClient Http

<h3>Edit Product</h3>

@if (CurrentProduct == null) {
  <p><em>Loading...</em></p>
}
else {
<EditForm Model="@CurrentProduct" OnValidSubmit="SaveProduct">
  <DataAnnotationsValidator />
  <fieldset>
    <div class="row mb-2">
      <label class="col-2" for="ProductName">Name:</label>
      <InputText class="col-6" id="ProductName" @bind-Value="CurrentProduct.ProductName" />
    </div>
    <div class="row mb-2">
      <div class="col-5 offset-2">
        <ValidationMessage For="@(() => CurrentProduct.ProductName)" />
      </div>
    </div>
    <div class="row mb-2">
      <label class="col-2" for="UnitPrice">Unit Price:</label>
      <input class="col-6" id="UnitPrice" @bind="CurrentProduct.UnitPrice" />
    </div>
    <div class="row mb-2">
      <label class="col-2" for="Package">Package:</label>
      <input class="col-6" id="Package" @bind="CurrentProduct.Package" />
    </div>
    <button class="btn btn-primary" type="submit">Save</button>
  </fieldset>
 </EditForm>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private Product? CurrentProduct { get; set; }

    protected override async Task OnInitializedAsync()
    {
      CurrentProduct = await Http.GetFromJsonAsync<Product>($"api/product/{Id}");
    }

    public void SaveProduct()
    {
      int i = 5;
    }
}



